// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio.Inputs
{

    public sealed class BoardQueryGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Descriptive text to contextualize the Query within the Board. Supports Markdown.
        /// </summary>
        [Input("caption")]
        public Input<string>? Caption { get; set; }

        /// <summary>
        /// The Dataset this Query is associated with.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        [Input("graphSettings")]
        private InputList<Inputs.BoardQueryGraphSettingGetArgs>? _graphSettings;

        /// <summary>
        /// Manages the settings for this query's graph on the board.
        /// See [Display Settings](https://docs.honeycomb.io/investigate/query/customize-results/#display-settings-menu) in the documentation for more information.
        /// </summary>
        public InputList<Inputs.BoardQueryGraphSettingGetArgs> GraphSettings
        {
            get => _graphSettings ?? (_graphSettings = new InputList<Inputs.BoardQueryGraphSettingGetArgs>());
            set => _graphSettings = value;
        }

        /// <summary>
        /// The ID of the Query Annotation to associate with this Query.
        /// </summary>
        [Input("queryAnnotationId")]
        public Input<string>? QueryAnnotationId { get; set; }

        /// <summary>
        /// The ID of the Query to run.
        /// </summary>
        [Input("queryId", required: true)]
        public Input<string> QueryId { get; set; } = null!;

        /// <summary>
        /// How the query should be displayed within the Board.
        /// </summary>
        [Input("queryStyle")]
        public Input<string>? QueryStyle { get; set; }

        public BoardQueryGetArgs()
        {
        }
        public static new BoardQueryGetArgs Empty => new BoardQueryGetArgs();
    }
}
