// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    [HoneycombioResourceType("honeycombio:index/dataset:Dataset")]
    public partial class Dataset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ISO8601-formatted time the dataset was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The current delete protection status of the Dataset. Cannot be set to false on creation.
        /// </summary>
        [Output("deleteProtected")]
        public Output<bool> DeleteProtected { get; private set; } = null!;

        /// <summary>
        /// The Dataset's description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The maximum unpacking depth of nested JSON fields.
        /// </summary>
        [Output("expandJsonDepth")]
        public Output<double> ExpandJsonDepth { get; private set; } = null!;

        /// <summary>
        /// ISO8601-formatted time the dataset was last written to (received event data).
        /// </summary>
        [Output("lastWrittenAt")]
        public Output<string> LastWrittenAt { get; private set; } = null!;

        /// <summary>
        /// The name of the Dataset.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The slug of the Dataset.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a Dataset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dataset(string name, DatasetArgs? args = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/dataset:Dataset", name, args ?? new DatasetArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Dataset(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/dataset:Dataset", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dataset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dataset Get(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
        {
            return new Dataset(name, id, state, options);
        }
    }

    public sealed class DatasetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The current delete protection status of the Dataset. Cannot be set to false on creation.
        /// </summary>
        [Input("deleteProtected")]
        public Input<bool>? DeleteProtected { get; set; }

        /// <summary>
        /// The Dataset's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum unpacking depth of nested JSON fields.
        /// </summary>
        [Input("expandJsonDepth")]
        public Input<double>? ExpandJsonDepth { get; set; }

        /// <summary>
        /// The name of the Dataset.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DatasetArgs()
        {
        }
        public static new DatasetArgs Empty => new DatasetArgs();
    }

    public sealed class DatasetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ISO8601-formatted time the dataset was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The current delete protection status of the Dataset. Cannot be set to false on creation.
        /// </summary>
        [Input("deleteProtected")]
        public Input<bool>? DeleteProtected { get; set; }

        /// <summary>
        /// The Dataset's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum unpacking depth of nested JSON fields.
        /// </summary>
        [Input("expandJsonDepth")]
        public Input<double>? ExpandJsonDepth { get; set; }

        /// <summary>
        /// ISO8601-formatted time the dataset was last written to (received event data).
        /// </summary>
        [Input("lastWrittenAt")]
        public Input<string>? LastWrittenAt { get; set; }

        /// <summary>
        /// The name of the Dataset.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the Dataset.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public DatasetState()
        {
        }
        public static new DatasetState Empty => new DatasetState();
    }
}
