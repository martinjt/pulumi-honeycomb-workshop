// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    [HoneycombioResourceType("honeycombio:index/trigger:Trigger")]
    public partial class Trigger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Control when the Trigger will send a notification.
        /// </summary>
        [Output("alertType")]
        public Output<string> AlertType { get; private set; } = null!;

        /// <summary>
        /// A configuration block that allows you to receive notifications when the delta between values in your data, compared to a
        /// previous time period, cross thresholds you configure.
        /// </summary>
        [Output("baselineDetails")]
        public Output<ImmutableArray<Outputs.TriggerBaselineDetail>> BaselineDetails { get; private set; } = null!;

        /// <summary>
        /// The dataset this Trigger is associated with.
        /// </summary>
        [Output("dataset")]
        public Output<string> Dataset { get; private set; } = null!;

        /// <summary>
        /// A description of the Trigger.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The state of the Trigger. If true, the Trigger will not be run.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// The schedule that determines when the trigger is run. When the time is within the scheduled window, the trigger will be
        /// run at the specified frequency. Outside of the window, the trigger will not be run.If no schedule is specified, the
        /// trigger will be run at the specified frequency at all times.
        /// </summary>
        [Output("evaluationSchedules")]
        public Output<ImmutableArray<Outputs.TriggerEvaluationSchedule>> EvaluationSchedules { get; private set; } = null!;

        /// <summary>
        /// The interval (in seconds) in which to check the results of the query's calculation against the threshold. This value
        /// must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's
        /// duration.
        /// </summary>
        [Output("frequency")]
        public Output<double> Frequency { get; private set; } = null!;

        /// <summary>
        /// The name of the Trigger.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Query that the Trigger will execute.
        /// </summary>
        [Output("queryId")]
        public Output<string?> QueryId { get; private set; } = null!;

        /// <summary>
        /// The QuerySpec JSON for the query that the Trigger will execute. Providing the QuerySpec JSON directly allows for
        /// additional validation that the QuerySpec is valid as a Trigger Query. While the JSON can be constructed manually, it is
        /// easiest to use the `honeycombio.getQuerySpecification` data source.
        /// </summary>
        [Output("queryJson")]
        public Output<string?> QueryJson { get; private set; } = null!;

        /// <summary>
        /// Zero or more recipients to notify when the resource fires.
        /// </summary>
        [Output("recipients")]
        public Output<ImmutableArray<Outputs.TriggerRecipient>> Recipients { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// A block describing the threshold for the Trigger to fire.
        /// </summary>
        [Output("thresholds")]
        public Output<ImmutableArray<Outputs.TriggerThreshold>> Thresholds { get; private set; } = null!;


        /// <summary>
        /// Create a Trigger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Trigger(string name, TriggerArgs? args = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/trigger:Trigger", name, args ?? new TriggerArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Trigger(string name, Input<string> id, TriggerState? state = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/trigger:Trigger", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Trigger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Trigger Get(string name, Input<string> id, TriggerState? state = null, CustomResourceOptions? options = null)
        {
            return new Trigger(name, id, state, options);
        }
    }

    public sealed class TriggerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Control when the Trigger will send a notification.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("baselineDetails")]
        private InputList<Inputs.TriggerBaselineDetailArgs>? _baselineDetails;

        /// <summary>
        /// A configuration block that allows you to receive notifications when the delta between values in your data, compared to a
        /// previous time period, cross thresholds you configure.
        /// </summary>
        public InputList<Inputs.TriggerBaselineDetailArgs> BaselineDetails
        {
            get => _baselineDetails ?? (_baselineDetails = new InputList<Inputs.TriggerBaselineDetailArgs>());
            set => _baselineDetails = value;
        }

        /// <summary>
        /// The dataset this Trigger is associated with.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// A description of the Trigger.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The state of the Trigger. If true, the Trigger will not be run.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("evaluationSchedules")]
        private InputList<Inputs.TriggerEvaluationScheduleArgs>? _evaluationSchedules;

        /// <summary>
        /// The schedule that determines when the trigger is run. When the time is within the scheduled window, the trigger will be
        /// run at the specified frequency. Outside of the window, the trigger will not be run.If no schedule is specified, the
        /// trigger will be run at the specified frequency at all times.
        /// </summary>
        public InputList<Inputs.TriggerEvaluationScheduleArgs> EvaluationSchedules
        {
            get => _evaluationSchedules ?? (_evaluationSchedules = new InputList<Inputs.TriggerEvaluationScheduleArgs>());
            set => _evaluationSchedules = value;
        }

        /// <summary>
        /// The interval (in seconds) in which to check the results of the query's calculation against the threshold. This value
        /// must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's
        /// duration.
        /// </summary>
        [Input("frequency")]
        public Input<double>? Frequency { get; set; }

        /// <summary>
        /// The name of the Trigger.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Query that the Trigger will execute.
        /// </summary>
        [Input("queryId")]
        public Input<string>? QueryId { get; set; }

        /// <summary>
        /// The QuerySpec JSON for the query that the Trigger will execute. Providing the QuerySpec JSON directly allows for
        /// additional validation that the QuerySpec is valid as a Trigger Query. While the JSON can be constructed manually, it is
        /// easiest to use the `honeycombio.getQuerySpecification` data source.
        /// </summary>
        [Input("queryJson")]
        public Input<string>? QueryJson { get; set; }

        [Input("recipients")]
        private InputList<Inputs.TriggerRecipientArgs>? _recipients;

        /// <summary>
        /// Zero or more recipients to notify when the resource fires.
        /// </summary>
        public InputList<Inputs.TriggerRecipientArgs> Recipients
        {
            get => _recipients ?? (_recipients = new InputList<Inputs.TriggerRecipientArgs>());
            set => _recipients = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("thresholds")]
        private InputList<Inputs.TriggerThresholdArgs>? _thresholds;

        /// <summary>
        /// A block describing the threshold for the Trigger to fire.
        /// </summary>
        public InputList<Inputs.TriggerThresholdArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.TriggerThresholdArgs>());
            set => _thresholds = value;
        }

        public TriggerArgs()
        {
        }
        public static new TriggerArgs Empty => new TriggerArgs();
    }

    public sealed class TriggerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Control when the Trigger will send a notification.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("baselineDetails")]
        private InputList<Inputs.TriggerBaselineDetailGetArgs>? _baselineDetails;

        /// <summary>
        /// A configuration block that allows you to receive notifications when the delta between values in your data, compared to a
        /// previous time period, cross thresholds you configure.
        /// </summary>
        public InputList<Inputs.TriggerBaselineDetailGetArgs> BaselineDetails
        {
            get => _baselineDetails ?? (_baselineDetails = new InputList<Inputs.TriggerBaselineDetailGetArgs>());
            set => _baselineDetails = value;
        }

        /// <summary>
        /// The dataset this Trigger is associated with.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// A description of the Trigger.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The state of the Trigger. If true, the Trigger will not be run.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("evaluationSchedules")]
        private InputList<Inputs.TriggerEvaluationScheduleGetArgs>? _evaluationSchedules;

        /// <summary>
        /// The schedule that determines when the trigger is run. When the time is within the scheduled window, the trigger will be
        /// run at the specified frequency. Outside of the window, the trigger will not be run.If no schedule is specified, the
        /// trigger will be run at the specified frequency at all times.
        /// </summary>
        public InputList<Inputs.TriggerEvaluationScheduleGetArgs> EvaluationSchedules
        {
            get => _evaluationSchedules ?? (_evaluationSchedules = new InputList<Inputs.TriggerEvaluationScheduleGetArgs>());
            set => _evaluationSchedules = value;
        }

        /// <summary>
        /// The interval (in seconds) in which to check the results of the query's calculation against the threshold. This value
        /// must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's
        /// duration.
        /// </summary>
        [Input("frequency")]
        public Input<double>? Frequency { get; set; }

        /// <summary>
        /// The name of the Trigger.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Query that the Trigger will execute.
        /// </summary>
        [Input("queryId")]
        public Input<string>? QueryId { get; set; }

        /// <summary>
        /// The QuerySpec JSON for the query that the Trigger will execute. Providing the QuerySpec JSON directly allows for
        /// additional validation that the QuerySpec is valid as a Trigger Query. While the JSON can be constructed manually, it is
        /// easiest to use the `honeycombio.getQuerySpecification` data source.
        /// </summary>
        [Input("queryJson")]
        public Input<string>? QueryJson { get; set; }

        [Input("recipients")]
        private InputList<Inputs.TriggerRecipientGetArgs>? _recipients;

        /// <summary>
        /// Zero or more recipients to notify when the resource fires.
        /// </summary>
        public InputList<Inputs.TriggerRecipientGetArgs> Recipients
        {
            get => _recipients ?? (_recipients = new InputList<Inputs.TriggerRecipientGetArgs>());
            set => _recipients = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("thresholds")]
        private InputList<Inputs.TriggerThresholdGetArgs>? _thresholds;

        /// <summary>
        /// A block describing the threshold for the Trigger to fire.
        /// </summary>
        public InputList<Inputs.TriggerThresholdGetArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.TriggerThresholdGetArgs>());
            set => _thresholds = value;
        }

        public TriggerState()
        {
        }
        public static new TriggerState Empty => new TriggerState();
    }
}
