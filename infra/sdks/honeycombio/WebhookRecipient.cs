// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    [HoneycombioResourceType("honeycombio:index/webhookRecipient:WebhookRecipient")]
    public partial class WebhookRecipient : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom headers for webhooks
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.WebhookRecipientHeader>> Headers { get; private set; } = null!;

        /// <summary>
        /// The name of this Webhook recipient.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The secret to include when sending the notification to the webhook.
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// Template for custom webhook payloads
        /// </summary>
        [Output("templates")]
        public Output<ImmutableArray<Outputs.WebhookRecipientTemplate>> Templates { get; private set; } = null!;

        /// <summary>
        /// The URL of the endpoint the notification will be sent to.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Variables for webhook templates
        /// </summary>
        [Output("variables")]
        public Output<ImmutableArray<Outputs.WebhookRecipientVariable>> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a WebhookRecipient resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebhookRecipient(string name, WebhookRecipientArgs args, CustomResourceOptions? options = null)
            : base("honeycombio:index/webhookRecipient:WebhookRecipient", name, args ?? new WebhookRecipientArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private WebhookRecipient(string name, Input<string> id, WebhookRecipientState? state = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/webhookRecipient:WebhookRecipient", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebhookRecipient resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebhookRecipient Get(string name, Input<string> id, WebhookRecipientState? state = null, CustomResourceOptions? options = null)
        {
            return new WebhookRecipient(name, id, state, options);
        }
    }

    public sealed class WebhookRecipientArgs : global::Pulumi.ResourceArgs
    {
        [Input("headers")]
        private InputList<Inputs.WebhookRecipientHeaderArgs>? _headers;

        /// <summary>
        /// Custom headers for webhooks
        /// </summary>
        public InputList<Inputs.WebhookRecipientHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.WebhookRecipientHeaderArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The name of this Webhook recipient.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The secret to include when sending the notification to the webhook.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("templates")]
        private InputList<Inputs.WebhookRecipientTemplateArgs>? _templates;

        /// <summary>
        /// Template for custom webhook payloads
        /// </summary>
        public InputList<Inputs.WebhookRecipientTemplateArgs> Templates
        {
            get => _templates ?? (_templates = new InputList<Inputs.WebhookRecipientTemplateArgs>());
            set => _templates = value;
        }

        /// <summary>
        /// The URL of the endpoint the notification will be sent to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        [Input("variables")]
        private InputList<Inputs.WebhookRecipientVariableArgs>? _variables;

        /// <summary>
        /// Variables for webhook templates
        /// </summary>
        public InputList<Inputs.WebhookRecipientVariableArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.WebhookRecipientVariableArgs>());
            set => _variables = value;
        }

        public WebhookRecipientArgs()
        {
        }
        public static new WebhookRecipientArgs Empty => new WebhookRecipientArgs();
    }

    public sealed class WebhookRecipientState : global::Pulumi.ResourceArgs
    {
        [Input("headers")]
        private InputList<Inputs.WebhookRecipientHeaderGetArgs>? _headers;

        /// <summary>
        /// Custom headers for webhooks
        /// </summary>
        public InputList<Inputs.WebhookRecipientHeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.WebhookRecipientHeaderGetArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The name of this Webhook recipient.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The secret to include when sending the notification to the webhook.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("templates")]
        private InputList<Inputs.WebhookRecipientTemplateGetArgs>? _templates;

        /// <summary>
        /// Template for custom webhook payloads
        /// </summary>
        public InputList<Inputs.WebhookRecipientTemplateGetArgs> Templates
        {
            get => _templates ?? (_templates = new InputList<Inputs.WebhookRecipientTemplateGetArgs>());
            set => _templates = value;
        }

        /// <summary>
        /// The URL of the endpoint the notification will be sent to.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("variables")]
        private InputList<Inputs.WebhookRecipientVariableGetArgs>? _variables;

        /// <summary>
        /// Variables for webhook templates
        /// </summary>
        public InputList<Inputs.WebhookRecipientVariableGetArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.WebhookRecipientVariableGetArgs>());
            set => _variables = value;
        }

        public WebhookRecipientState()
        {
        }
        public static new WebhookRecipientState Empty => new WebhookRecipientState();
    }
}
