// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    [HoneycombioResourceType("honeycombio:index/burnAlert:BurnAlert")]
    public partial class BurnAlert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alert type of this Burn Alert.
        /// </summary>
        [Output("alertType")]
        public Output<string> AlertType { get; private set; } = null!;

        /// <summary>
        /// The percent the budget has decreased over the budget rate window.
        /// </summary>
        [Output("budgetRateDecreasePercent")]
        public Output<double?> BudgetRateDecreasePercent { get; private set; } = null!;

        /// <summary>
        /// The time period, in minutes, over which a budget rate will be calculated.
        /// </summary>
        [Output("budgetRateWindowMinutes")]
        public Output<double?> BudgetRateWindowMinutes { get; private set; } = null!;

        /// <summary>
        /// The dataset this Burn Alert is associated with. Will be deprecated in a future release.
        /// </summary>
        [Output("dataset")]
        public Output<string> Dataset { get; private set; } = null!;

        /// <summary>
        /// A description for this Burn Alert.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and the alert will fire.
        /// </summary>
        [Output("exhaustionMinutes")]
        public Output<double?> ExhaustionMinutes { get; private set; } = null!;

        /// <summary>
        /// Zero or more recipients to notify when the resource fires.
        /// </summary>
        [Output("recipients")]
        public Output<ImmutableArray<Outputs.BurnAlertRecipient>> Recipients { get; private set; } = null!;

        /// <summary>
        /// The ID of the SLO that this Burn Alert is associated with.
        /// </summary>
        [Output("sloId")]
        public Output<string> SloId { get; private set; } = null!;


        /// <summary>
        /// Create a BurnAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BurnAlert(string name, BurnAlertArgs args, CustomResourceOptions? options = null)
            : base("honeycombio:index/burnAlert:BurnAlert", name, args ?? new BurnAlertArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private BurnAlert(string name, Input<string> id, BurnAlertState? state = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/burnAlert:BurnAlert", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BurnAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BurnAlert Get(string name, Input<string> id, BurnAlertState? state = null, CustomResourceOptions? options = null)
        {
            return new BurnAlert(name, id, state, options);
        }
    }

    public sealed class BurnAlertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alert type of this Burn Alert.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        /// <summary>
        /// The percent the budget has decreased over the budget rate window.
        /// </summary>
        [Input("budgetRateDecreasePercent")]
        public Input<double>? BudgetRateDecreasePercent { get; set; }

        /// <summary>
        /// The time period, in minutes, over which a budget rate will be calculated.
        /// </summary>
        [Input("budgetRateWindowMinutes")]
        public Input<double>? BudgetRateWindowMinutes { get; set; }

        /// <summary>
        /// The dataset this Burn Alert is associated with. Will be deprecated in a future release.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// A description for this Burn Alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and the alert will fire.
        /// </summary>
        [Input("exhaustionMinutes")]
        public Input<double>? ExhaustionMinutes { get; set; }

        [Input("recipients")]
        private InputList<Inputs.BurnAlertRecipientArgs>? _recipients;

        /// <summary>
        /// Zero or more recipients to notify when the resource fires.
        /// </summary>
        public InputList<Inputs.BurnAlertRecipientArgs> Recipients
        {
            get => _recipients ?? (_recipients = new InputList<Inputs.BurnAlertRecipientArgs>());
            set => _recipients = value;
        }

        /// <summary>
        /// The ID of the SLO that this Burn Alert is associated with.
        /// </summary>
        [Input("sloId", required: true)]
        public Input<string> SloId { get; set; } = null!;

        public BurnAlertArgs()
        {
        }
        public static new BurnAlertArgs Empty => new BurnAlertArgs();
    }

    public sealed class BurnAlertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alert type of this Burn Alert.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        /// <summary>
        /// The percent the budget has decreased over the budget rate window.
        /// </summary>
        [Input("budgetRateDecreasePercent")]
        public Input<double>? BudgetRateDecreasePercent { get; set; }

        /// <summary>
        /// The time period, in minutes, over which a budget rate will be calculated.
        /// </summary>
        [Input("budgetRateWindowMinutes")]
        public Input<double>? BudgetRateWindowMinutes { get; set; }

        /// <summary>
        /// The dataset this Burn Alert is associated with. Will be deprecated in a future release.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// A description for this Burn Alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and the alert will fire.
        /// </summary>
        [Input("exhaustionMinutes")]
        public Input<double>? ExhaustionMinutes { get; set; }

        [Input("recipients")]
        private InputList<Inputs.BurnAlertRecipientGetArgs>? _recipients;

        /// <summary>
        /// Zero or more recipients to notify when the resource fires.
        /// </summary>
        public InputList<Inputs.BurnAlertRecipientGetArgs> Recipients
        {
            get => _recipients ?? (_recipients = new InputList<Inputs.BurnAlertRecipientGetArgs>());
            set => _recipients = value;
        }

        /// <summary>
        /// The ID of the SLO that this Burn Alert is associated with.
        /// </summary>
        [Input("sloId")]
        public Input<string>? SloId { get; set; }

        public BurnAlertState()
        {
        }
        public static new BurnAlertState Empty => new BurnAlertState();
    }
}
