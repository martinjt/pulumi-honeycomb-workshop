// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    [HoneycombioResourceType("honeycombio:index/markerSetting:MarkerSetting")]
    public partial class MarkerSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The color set for the marker as a hex color code.
        /// </summary>
        [Output("color")]
        public Output<string> Color { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the marker setting was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The dataset this marker setting belongs to. If not set, it will be Environment-wide.
        /// </summary>
        [Output("dataset")]
        public Output<string?> Dataset { get; private set; } = null!;

        [Output("markerSettingId")]
        public Output<string> MarkerSettingId { get; private set; } = null!;

        /// <summary>
        /// The type of marker setting. (e.g. "deploy", "job-run")
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the marker setting was last modified.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a MarkerSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MarkerSetting(string name, MarkerSettingArgs args, CustomResourceOptions? options = null)
            : base("honeycombio:index/markerSetting:MarkerSetting", name, args ?? new MarkerSettingArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private MarkerSetting(string name, Input<string> id, MarkerSettingState? state = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/markerSetting:MarkerSetting", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MarkerSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MarkerSetting Get(string name, Input<string> id, MarkerSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new MarkerSetting(name, id, state, options);
        }
    }

    public sealed class MarkerSettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color set for the marker as a hex color code.
        /// </summary>
        [Input("color", required: true)]
        public Input<string> Color { get; set; } = null!;

        /// <summary>
        /// The dataset this marker setting belongs to. If not set, it will be Environment-wide.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        [Input("markerSettingId")]
        public Input<string>? MarkerSettingId { get; set; }

        /// <summary>
        /// The type of marker setting. (e.g. "deploy", "job-run")
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public MarkerSettingArgs()
        {
        }
        public static new MarkerSettingArgs Empty => new MarkerSettingArgs();
    }

    public sealed class MarkerSettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color set for the marker as a hex color code.
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// Timestamp when the marker setting was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The dataset this marker setting belongs to. If not set, it will be Environment-wide.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        [Input("markerSettingId")]
        public Input<string>? MarkerSettingId { get; set; }

        /// <summary>
        /// The type of marker setting. (e.g. "deploy", "job-run")
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Timestamp when the marker setting was last modified.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public MarkerSettingState()
        {
        }
        public static new MarkerSettingState Empty => new MarkerSettingState();
    }
}
