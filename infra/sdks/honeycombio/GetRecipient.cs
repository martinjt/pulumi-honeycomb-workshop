// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    public static class GetRecipient
    {
        public static Task<GetRecipientResult> InvokeAsync(GetRecipientArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecipientResult>("honeycombio:index/getRecipient:getRecipient", args ?? new GetRecipientArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetRecipientResult> Invoke(GetRecipientInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecipientResult>("honeycombio:index/getRecipient:getRecipient", args ?? new GetRecipientInvokeArgs(), options.WithDefaults());

        public static Output<GetRecipientResult> Invoke(GetRecipientInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecipientResult>("honeycombio:index/getRecipient:getRecipient", args ?? new GetRecipientInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecipientArgs : global::Pulumi.InvokeArgs
    {
        [Input("dataset")]
        public string? Dataset { get; set; }

        [Input("detailFilter")]
        public Inputs.GetRecipientDetailFilterArgs? DetailFilter { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("target")]
        public string? Target { get; set; }

        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetRecipientArgs()
        {
        }
        public static new GetRecipientArgs Empty => new GetRecipientArgs();
    }

    public sealed class GetRecipientInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        [Input("detailFilter")]
        public Input<Inputs.GetRecipientDetailFilterInputArgs>? DetailFilter { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("target")]
        public Input<string>? Target { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetRecipientInvokeArgs()
        {
        }
        public static new GetRecipientInvokeArgs Empty => new GetRecipientInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecipientResult
    {
        public readonly string Address;
        public readonly string Channel;
        public readonly string? Dataset;
        public readonly Outputs.GetRecipientDetailFilterResult? DetailFilter;
        public readonly string Id;
        public readonly string IntegrationKey;
        public readonly string IntegrationName;
        public readonly string Name;
        public readonly string Secret;
        public readonly string? Target;
        public readonly string Type;
        public readonly string Url;

        [OutputConstructor]
        private GetRecipientResult(
            string address,

            string channel,

            string? dataset,

            Outputs.GetRecipientDetailFilterResult? detailFilter,

            string id,

            string integrationKey,

            string integrationName,

            string name,

            string secret,

            string? target,

            string type,

            string url)
        {
            Address = address;
            Channel = channel;
            Dataset = dataset;
            DetailFilter = detailFilter;
            Id = id;
            IntegrationKey = integrationKey;
            IntegrationName = integrationName;
            Name = name;
            Secret = secret;
            Target = target;
            Type = type;
            Url = url;
        }
    }
}
