// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Honeycombio
{
    [HoneycombioResourceType("honeycombio:index/board:Board")]
    public partial class Board : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URL of the Board in the Honeycomb UI.
        /// </summary>
        [Output("boardUrl")]
        public Output<string> BoardUrl { get; private set; } = null!;

        /// <summary>
        /// The number of columns to layout on the Board.
        /// </summary>
        [Output("columnLayout")]
        public Output<string> ColumnLayout { get; private set; } = null!;

        /// <summary>
        /// The description of the Board. Supports Markdown.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Board.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A query to be displayed on the Board.
        /// </summary>
        [Output("queries")]
        public Output<ImmutableArray<Outputs.BoardQuery>> Queries { get; private set; } = null!;

        /// <summary>
        /// An SLO to be displayed on the Board.
        /// </summary>
        [Output("slos")]
        public Output<ImmutableArray<Outputs.BoardSlo>> Slos { get; private set; } = null!;

        /// <summary>
        /// How the Board should be displayed in the UI.
        /// </summary>
        [Output("style")]
        public Output<string> Style { get; private set; } = null!;


        /// <summary>
        /// Create a Board resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Board(string name, BoardArgs? args = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/board:Board", name, args ?? new BoardArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Board(string name, Input<string> id, BoardState? state = null, CustomResourceOptions? options = null)
            : base("honeycombio:index/board:Board", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Board resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Board Get(string name, Input<string> id, BoardState? state = null, CustomResourceOptions? options = null)
        {
            return new Board(name, id, state, options);
        }
    }

    public sealed class BoardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of columns to layout on the Board.
        /// </summary>
        [Input("columnLayout")]
        public Input<string>? ColumnLayout { get; set; }

        /// <summary>
        /// The description of the Board. Supports Markdown.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Board.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("queries")]
        private InputList<Inputs.BoardQueryArgs>? _queries;

        /// <summary>
        /// A query to be displayed on the Board.
        /// </summary>
        public InputList<Inputs.BoardQueryArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.BoardQueryArgs>());
            set => _queries = value;
        }

        [Input("slos")]
        private InputList<Inputs.BoardSloArgs>? _slos;

        /// <summary>
        /// An SLO to be displayed on the Board.
        /// </summary>
        public InputList<Inputs.BoardSloArgs> Slos
        {
            get => _slos ?? (_slos = new InputList<Inputs.BoardSloArgs>());
            set => _slos = value;
        }

        /// <summary>
        /// How the Board should be displayed in the UI.
        /// </summary>
        [Input("style")]
        public Input<string>? Style { get; set; }

        public BoardArgs()
        {
        }
        public static new BoardArgs Empty => new BoardArgs();
    }

    public sealed class BoardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the Board in the Honeycomb UI.
        /// </summary>
        [Input("boardUrl")]
        public Input<string>? BoardUrl { get; set; }

        /// <summary>
        /// The number of columns to layout on the Board.
        /// </summary>
        [Input("columnLayout")]
        public Input<string>? ColumnLayout { get; set; }

        /// <summary>
        /// The description of the Board. Supports Markdown.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Board.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("queries")]
        private InputList<Inputs.BoardQueryGetArgs>? _queries;

        /// <summary>
        /// A query to be displayed on the Board.
        /// </summary>
        public InputList<Inputs.BoardQueryGetArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.BoardQueryGetArgs>());
            set => _queries = value;
        }

        [Input("slos")]
        private InputList<Inputs.BoardSloGetArgs>? _slos;

        /// <summary>
        /// An SLO to be displayed on the Board.
        /// </summary>
        public InputList<Inputs.BoardSloGetArgs> Slos
        {
            get => _slos ?? (_slos = new InputList<Inputs.BoardSloGetArgs>());
            set => _slos = value;
        }

        /// <summary>
        /// How the Board should be displayed in the UI.
        /// </summary>
        [Input("style")]
        public Input<string>? Style { get; set; }

        public BoardState()
        {
        }
        public static new BoardState Empty => new BoardState();
    }
}
